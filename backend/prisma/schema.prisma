generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 2°) Criando as models (tabelas)...
model User {
  id           String        @id @default(uuid())
  email        String        @unique // para o campo ser único - "Travar e sor tem um no banco"
  firstName    String
  lastName     String
  password     String
  imageUrl     String
  createAt     DateTime      @default(now())
  updateAt     DateTime      @updatedAt
  // 84°) Relacionamento um para muitos e o usar o comando: npx prisma format
  propertie    Propertie[]
  reservations Reservation[]


  @@map("user")
}

// 83°) Criando as models que vão ser usadas na parte do Propietário - propertie...
model Propertie {
  id           String        @id @default(uuid())
  title        String
  price        Float
  description  String
  imageUrl     String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  User         User?         @relation(fields: [userId], references: [id])
  userId       String?
  reservations Reservation[]
  options      Option[]


  @@map("propertie")
}

// 131°)
model Reservation {
  id          String     @id @default(uuid())
  start       DateTime
  end         DateTime
  User        User?      @relation(fields: [userId], references: [id])
  userId      String?
  Propertie   Propertie? @relation(fields: [propertieId], references: [id])
  propertieId String?

  @@map("reservation")
}

model Option {
  id         Int         @id @default(autoincrement())
  name       String
  properties Propertie[]

  @@map("option")
}

// OBS.: Usar o comando 'npx prisma format' após criar cada models
// OBS.: Após criar as models e formatar devemos usar o comando: npx prisma migrate dev
//OBS: após o 131° ir no reservation.module.ts;
